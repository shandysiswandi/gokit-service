// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/shandysiswandi/gokit-service/entity"
	mock "github.com/stretchr/testify/mock"

	sql "database/sql"
)

// DatabaseReaderWriter is an autogenerated mock type for the DatabaseReaderWriter type
type DatabaseReaderWriter struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *DatabaseReaderWriter) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateTodo provides a mock function with given fields: ctx, todo
func (_m *DatabaseReaderWriter) CreateTodo(ctx context.Context, todo entity.Todo) error {
	ret := _m.Called(ctx, todo)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.Todo) error); ok {
		r0 = rf(ctx, todo)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteTodo provides a mock function with given fields: ctx, id
func (_m *DatabaseReaderWriter) DeleteTodo(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllTodo provides a mock function with given fields: ctx
func (_m *DatabaseReaderWriter) GetAllTodo(ctx context.Context) ([]entity.Todo, error) {
	ret := _m.Called(ctx)

	var r0 []entity.Todo
	if rf, ok := ret.Get(0).(func(context.Context) []entity.Todo); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Todo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDB provides a mock function with given fields:
func (_m *DatabaseReaderWriter) GetDB() *sql.DB {
	ret := _m.Called()

	var r0 *sql.DB
	if rf, ok := ret.Get(0).(func() *sql.DB); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.DB)
		}
	}

	return r0
}

// GetTodoByID provides a mock function with given fields: ctx, id
func (_m *DatabaseReaderWriter) GetTodoByID(ctx context.Context, id string) (entity.Todo, error) {
	ret := _m.Called(ctx, id)

	var r0 entity.Todo
	if rf, ok := ret.Get(0).(func(context.Context, string) entity.Todo); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(entity.Todo)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTodo provides a mock function with given fields: ctx, todo
func (_m *DatabaseReaderWriter) UpdateTodo(ctx context.Context, todo entity.Todo) error {
	ret := _m.Called(ctx, todo)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.Todo) error); ok {
		r0 = rf(ctx, todo)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
